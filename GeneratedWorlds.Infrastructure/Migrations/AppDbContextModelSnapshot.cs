// <auto-generated />
using System;
using GeneratedWorlds.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GeneratedWorlds.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GeneratedWorlds.Infrastructure.DataModels.CharacterDataModel", b =>
                {
                    b.Property<Guid>("Reference")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Reference");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("GeneratedWorlds.Infrastructure.DataModels.CharacterInventoryItemDataModel", b =>
                {
                    b.Property<Guid>("Reference")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CharacterReference")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ItemReference")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ItemType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Reference");

                    b.HasIndex("CharacterReference");

                    b.ToTable("InventoryItems");
                });

            modelBuilder.Entity("GeneratedWorlds.Infrastructure.DataModels.CharacterSkillDataModel", b =>
                {
                    b.Property<Guid>("Reference")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CharacterReference")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<int>("SkillType")
                        .HasColumnType("int");

                    b.HasKey("Reference");

                    b.HasIndex("CharacterReference");

                    b.ToTable("CharacterSkills");
                });

            modelBuilder.Entity("GeneratedWorlds.Infrastructure.DataModels.Items.ItemDataModel", b =>
                {
                    b.Property<Guid>("Reference")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Reference");

                    b.ToTable("Items", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("GeneratedWorlds.Infrastructure.DataModels.Items.PotionDataModel", b =>
                {
                    b.HasBaseType("GeneratedWorlds.Infrastructure.DataModels.Items.ItemDataModel");

                    b.Property<string>("Effect")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RelatedSkill")
                        .HasColumnType("int");

                    b.ToTable("Potions", (string)null);
                });

            modelBuilder.Entity("GeneratedWorlds.Infrastructure.DataModels.CharacterInventoryItemDataModel", b =>
                {
                    b.HasOne("GeneratedWorlds.Infrastructure.DataModels.CharacterDataModel", "Character")
                        .WithMany("Inventory")
                        .HasForeignKey("CharacterReference")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("GeneratedWorlds.Infrastructure.DataModels.CharacterSkillDataModel", b =>
                {
                    b.HasOne("GeneratedWorlds.Infrastructure.DataModels.CharacterDataModel", "Character")
                        .WithMany("Skills")
                        .HasForeignKey("CharacterReference")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("GeneratedWorlds.Infrastructure.DataModels.Items.PotionDataModel", b =>
                {
                    b.HasOne("GeneratedWorlds.Infrastructure.DataModels.Items.ItemDataModel", null)
                        .WithOne()
                        .HasForeignKey("GeneratedWorlds.Infrastructure.DataModels.Items.PotionDataModel", "Reference")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GeneratedWorlds.Infrastructure.DataModels.CharacterDataModel", b =>
                {
                    b.Navigation("Inventory");

                    b.Navigation("Skills");
                });
#pragma warning restore 612, 618
        }
    }
}
